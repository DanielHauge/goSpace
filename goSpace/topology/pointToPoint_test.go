package topology

import (
	"reflect"
	"testing"
)

var testPointToPoint PointToPoint

func init() {
	testPointToPoint = CreatePointToPoint("Device1", "192.168.0.1", 8080)
}

// TestPointToPointCreatePointToPoint will make sure the PointToPoint structure
// is created correctly.
func TestPointToPointCreatePointToPoint(t *testing.T) {
	// Create PointToPoint manually for comparison.
	pointToPointManual := PointToPoint{name: "Device1", address: "192.168.0.1:8080"}

	// Check if the pointToPoints are equal.
	if !reflect.DeepEqual(testPointToPoint, pointToPointManual) {
		t.Errorf("The method generated pointToPoint %q, didn't look as expected: %q", testPointToPoint, pointToPointManual)
	}
}

// TestPointToPointToString will make sure the name and address of the
// pointToPoint is printed in a readable format.
func TestPointToPointToString(t *testing.T) {
	// Create string for comparison
	toStringManual := "Name: Device1, address: 192.168.0.1:8080"

	// Check that the two strings are equal.
	if !reflect.DeepEqual(toStringManual, testPointToPoint.ToString()) {
		t.Errorf("The string generated by the toString method %s, didn't look as expected %s.", testPointToPoint.ToString(), toStringManual)
	}
}

// TestPointToPointGetAddress will make sure the address of the pointToPoint is
// returned.
func TestPointToPointGetAddress(t *testing.T) {
	// Create address for comparison.
	addressManual := "192.168.0.1:8080"

	// Check that the two addresses are equal.
	if !reflect.DeepEqual(addressManual, testPointToPoint.GetAddress()) {
		t.Errorf("The address from the method %s, didn't look as expected %s.", testPointToPoint.GetAddress(), addressManual)
	}
}

// TestPointToPointGetName will make sure the name of the pointToPoint is
// returned.
func TestPointToPointGetName(t *testing.T) {
	// Create name for comparison.
	nameManual := "Device1"

	// Check that the two names are equal.
	if !reflect.DeepEqual(nameManual, testPointToPoint.GetName()) {
		t.Errorf("The name from the method %s, didn't look as expected %s.", testPointToPoint.GetName(), nameManual)
	}
}
